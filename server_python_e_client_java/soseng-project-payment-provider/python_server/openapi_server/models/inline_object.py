# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.paymentdata_expiration import PaymentdataExpiration
from openapi_server.models.paymentdata_transaction import PaymentdataTransaction
from openapi_server import util

from openapi_server.models.paymentdata_expiration import PaymentdataExpiration  # noqa: E501
from openapi_server.models.paymentdata_transaction import PaymentdataTransaction  # noqa: E501

class InlineObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number=None, expiration=None, cvc=None, circuit=None, transaction=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI

        :param card_number: The card_number of this InlineObject.  # noqa: E501
        :type card_number: int
        :param expiration: The expiration of this InlineObject.  # noqa: E501
        :type expiration: PaymentdataExpiration
        :param cvc: The cvc of this InlineObject.  # noqa: E501
        :type cvc: int
        :param circuit: The circuit of this InlineObject.  # noqa: E501
        :type circuit: str
        :param transaction: The transaction of this InlineObject.  # noqa: E501
        :type transaction: PaymentdataTransaction
        """
        self.openapi_types = {
            'card_number': int,
            'expiration': PaymentdataExpiration,
            'cvc': int,
            'circuit': str,
            'transaction': PaymentdataTransaction
        }

        self.attribute_map = {
            'card_number': 'card_number',
            'expiration': 'expiration',
            'cvc': 'CVC',
            'circuit': 'circuit',
            'transaction': 'transaction'
        }

        self._card_number = card_number
        self._expiration = expiration
        self._cvc = cvc
        self._circuit = circuit
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object of this InlineObject.  # noqa: E501
        :rtype: InlineObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number(self):
        """Gets the card_number of this InlineObject.


        :return: The card_number of this InlineObject.
        :rtype: int
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this InlineObject.


        :param card_number: The card_number of this InlineObject.
        :type card_number: int
        """

        self._card_number = card_number

    @property
    def expiration(self):
        """Gets the expiration of this InlineObject.


        :return: The expiration of this InlineObject.
        :rtype: PaymentdataExpiration
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this InlineObject.


        :param expiration: The expiration of this InlineObject.
        :type expiration: PaymentdataExpiration
        """

        self._expiration = expiration

    @property
    def cvc(self):
        """Gets the cvc of this InlineObject.


        :return: The cvc of this InlineObject.
        :rtype: int
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this InlineObject.


        :param cvc: The cvc of this InlineObject.
        :type cvc: int
        """

        self._cvc = cvc

    @property
    def circuit(self):
        """Gets the circuit of this InlineObject.


        :return: The circuit of this InlineObject.
        :rtype: str
        """
        return self._circuit

    @circuit.setter
    def circuit(self, circuit):
        """Sets the circuit of this InlineObject.


        :param circuit: The circuit of this InlineObject.
        :type circuit: str
        """

        self._circuit = circuit

    @property
    def transaction(self):
        """Gets the transaction of this InlineObject.


        :return: The transaction of this InlineObject.
        :rtype: PaymentdataTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this InlineObject.


        :param transaction: The transaction of this InlineObject.
        :type transaction: PaymentdataTransaction
        """

        self._transaction = transaction
