/*
 * prontogramAPI
 * È l'API Restful offerta dall'applicazione di messaggistica *Prontogram* che vi racchiude la capability di inoltrare i messaggi circa le offerte inviate da ACMESky ai clienti interessati.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package prontogramprovider.prontogram_client;

import prontogramprovider.ApiException;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.Message;
import io.swagger.client.model.MessageList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RisorseApi
 */
@Ignore
public class RisorseApiTest {

    private final RisorseApi api = new RisorseApi();

    /**
     * Restituisci i primi 10 messaggi del cliente
     *
     * È la risorsa che, a fronte di una richiesta HTTP nella cui intestazione vi è un &#x60;token&#x60; identificativo valido, restituisce i primi 20 messaggi inviati al cliente il cui username è pari al parametro di query &#x60;username&#x60;.  In caso la richiesta HTTP abbia esito positivo, la risposta è un reindirizzamento alla risorsa &#x60;/message/{username}/from/0&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageUsernameTest() throws ApiException {
        String username = null;
        api.getMessageUsername(username);

        // TODO: test validations
    }
    /**
     * Restituisci 10 messaggi del cliente
     *
     * È la risorsa che, a fronte di una richiesta HTTP nella cui intestazione vi è un &#x60;token&#x60; identificativo valido, restituisce i 10 messaggi successivi a quello con id pari al parametro di query &#x60;messageId&#x60; e inviati al cliente il cui username è pari al parametro di query &#x60;username&#x60;.  Il body della richiesta e della risposta HTTP è di tipo &#x60;application/vnd.api+json&#x60; in quanto l&#x27;API prontogramAPI è al livello 3 di modello di maturità di Richardson: nella risposta sono presenti anche i campi &#x60;links&#x60; per permettere l&#x27;esplorazione dinamica, come richiesto da RMML3.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageUsernameFromMessageidTest() throws ApiException {
        String username = null;
        String messageid = null;
        InlineResponse2001 response = api.getMessageUsernameFromMessageid(username, messageid);

        // TODO: test validations
    }
    /**
     * Restituisci il messaggio del cliente
     *
     * È la risorsa che, a fronte di una richiesta HTTP nella cui intestazione vi è un &#x60;token&#x60; identificativo valido, restituisce il messaggio con id pari al parametro di query &#x60;messageid&#x60; inviato al cliente il cui username è pari al parametro di query &#x60;username&#x60;.  Il body della richiesta e della risposta HTTP è di tipo &#x60;application/vnd.api+json&#x60; in quanto l&#x27;API prontogramAPI è al livello 3 di modello di maturità di Richardson: nella risposta sono presenti anche i campi &#x60;links&#x60; per permettere l&#x27;esplorazione dinamica, come richiesto da RMML3.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageUsernameMessageidTest() throws ApiException {
        String username = null;
        String messageid = null;
        InlineResponse2002 response = api.getMessageUsernameMessageid(username, messageid);

        // TODO: test validations
    }
    /**
     * Restituisci tutti i messaggi
     *
     * È la risorsa che, a fronte di una richiesta HTTP nella cui intestazione vi è un &#x60;token&#x60; identificativo valido, restituisce tutti i messaggi (in blocchi di cardinalità 20) accessibili al fruitore (utente o ACMESky) identificato da quel token: in dettaglio, l&#x27;utente ha accesso solo ai messaggi di cui è destinatario, mentre ACMESky ha accesso a tutti i messaggi che ha inoltrato ai suoi utenti mediante Prontogram (potrebbe richiederli per fini statistici, ad esempio).  Il body della risposta HTTP è di tipo &#x60;application/vnd.api+json&#x60; in quanto l&#x27;API prontogramAPI è al livello 3 di modello di maturità di Richardson: con la risposta sono restituiti anche i campi &#x60;links&#x60; per permettere l&#x27;esplorazione dinamica, come richiesto da RMML3.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAllmessageTest() throws ApiException {
        InlineResponse200 response = api.postAllmessage();

        // TODO: test validations
    }
    /**
     * Invia messaggio
     *
     * È la risorsa che, a fronte di una richiesta HTTP nella cui intestazione vi è un &#x60;token&#x60; identificativo valido, invia un messaggio il cui corpo e destinatario sono quelli specificati nel body della richiesta HTTP.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCreatemessageTest() throws ApiException {
        Message body = null;
        api.postCreatemessage(body);

        // TODO: test validations
    }
    /**
     * Invia messaggi
     *
     * È la risorsa che, a fronte di una richiesta HTTP nella cui intestazione vi è un &#x60;token&#x60; identificativo valido, invia un messaggio il cui corpo e destinatario sono quelli specificati nel body della richiesta HTTP. A differenza di /createmessage, questo endpoint supporta l&#x27;invio di più messaggi alla volta
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCreatemessagesTest() throws ApiException {
        MessageList body = null;
        api.postCreatemessages(body);

        // TODO: test validations
    }
    /**
     * Autentica un cliente
     *
     * È la risorsa che permette al cliente o ad ACMESky di ottenere il token temporaneo tramite cui potranno essere identificati e autorizzati da Prontogram.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postLoginTest() throws ApiException {
        InlineResponse2003 response = api.postLogin();

        // TODO: test validations
    }
}
