# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.notifypayment_amount_payed import NotifypaymentAmountPayed  # noqa: F401,E501
from swagger_server.models.notifypayment_customer import NotifypaymentCustomer  # noqa: F401,E501
from swagger_server.models.notifypayment_transaction import NotifypaymentTransaction  # noqa: F401,E501
from swagger_server import util


class NotifypaymentBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, offer_code: str=None, customer: NotifypaymentCustomer=None, amount_payed: NotifypaymentAmountPayed=None, transaction: NotifypaymentTransaction=None):  # noqa: E501
        """NotifypaymentBody - a model defined in Swagger

        :param offer_code: The offer_code of this NotifypaymentBody.  # noqa: E501
        :type offer_code: str
        :param customer: The customer of this NotifypaymentBody.  # noqa: E501
        :type customer: NotifypaymentCustomer
        :param amount_payed: The amount_payed of this NotifypaymentBody.  # noqa: E501
        :type amount_payed: NotifypaymentAmountPayed
        :param transaction: The transaction of this NotifypaymentBody.  # noqa: E501
        :type transaction: NotifypaymentTransaction
        """
        self.swagger_types = {
            'offer_code': str,
            'customer': NotifypaymentCustomer,
            'amount_payed': NotifypaymentAmountPayed,
            'transaction': NotifypaymentTransaction
        }

        self.attribute_map = {
            'offer_code': 'offer_code',
            'customer': 'customer',
            'amount_payed': 'amount_payed',
            'transaction': 'transaction'
        }
        self._offer_code = offer_code
        self._customer = customer
        self._amount_payed = amount_payed
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt) -> 'NotifypaymentBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The notifypayment_body of this NotifypaymentBody.  # noqa: E501
        :rtype: NotifypaymentBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_code(self) -> str:
        """Gets the offer_code of this NotifypaymentBody.

        Codice identificativo dell'offerta  # noqa: E501

        :return: The offer_code of this NotifypaymentBody.
        :rtype: str
        """
        return self._offer_code

    @offer_code.setter
    def offer_code(self, offer_code: str):
        """Sets the offer_code of this NotifypaymentBody.

        Codice identificativo dell'offerta  # noqa: E501

        :param offer_code: The offer_code of this NotifypaymentBody.
        :type offer_code: str
        """

        self._offer_code = offer_code

    @property
    def customer(self) -> NotifypaymentCustomer:
        """Gets the customer of this NotifypaymentBody.


        :return: The customer of this NotifypaymentBody.
        :rtype: NotifypaymentCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer: NotifypaymentCustomer):
        """Sets the customer of this NotifypaymentBody.


        :param customer: The customer of this NotifypaymentBody.
        :type customer: NotifypaymentCustomer
        """

        self._customer = customer

    @property
    def amount_payed(self) -> NotifypaymentAmountPayed:
        """Gets the amount_payed of this NotifypaymentBody.


        :return: The amount_payed of this NotifypaymentBody.
        :rtype: NotifypaymentAmountPayed
        """
        return self._amount_payed

    @amount_payed.setter
    def amount_payed(self, amount_payed: NotifypaymentAmountPayed):
        """Sets the amount_payed of this NotifypaymentBody.


        :param amount_payed: The amount_payed of this NotifypaymentBody.
        :type amount_payed: NotifypaymentAmountPayed
        """

        self._amount_payed = amount_payed

    @property
    def transaction(self) -> NotifypaymentTransaction:
        """Gets the transaction of this NotifypaymentBody.


        :return: The transaction of this NotifypaymentBody.
        :rtype: NotifypaymentTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction: NotifypaymentTransaction):
        """Sets the transaction of this NotifypaymentBody.


        :param transaction: The transaction of this NotifypaymentBody.
        :type transaction: NotifypaymentTransaction
        """

        self._transaction = transaction
